c = 2 * atan2( sqrt(a), sqrt(1-a)
dist = R * c
return(dist)
}
zipdist = function(lat1, long1, lat2, long2) {
## calc the distance
## http://goo.gl/OVZDz
## http://goo.gl/fcGlC
R = 3961 # Earth radius in miles, 6373 for km
BENT.LAT = 42.38769629999999
BENT.LONG = -71.22021320
dlong = long2 - long1
dlat = lat2 - lat1
a = (sin(dlat/2))^2 + cos(lat1) * cos(lat2) * (sin(dlon/2))^2
c = 2 * atan2( sqrt(a), sqrt(1-a))
dist = R * c
return(dist)
}
zipdist = function(lat1, long1, lat2 = 42.387696299999, long2 = -71.22021320) {
## calc the distance
## http://goo.gl/OVZDz
## http://goo.gl/fcGlC
R = 3961 # Earth radius in miles, 6373 for km
#BENT.LAT = 42.38769629999999
#BENT.LONG = -71.22021320
dlong = BENT.LONG - long1
dlat = BENT.LAT - lat1
a = (sin(dlat/2))^2 + cos(lat1) * cos(lat2) * (sin(dlon/2))^2
c = 2 * atan2( sqrt(a), sqrt(1-a))
dist = R * c
return(dist)
}
?apply
library(plyr)
colnames(df)
tmp = ddply(df, .(pidm), summarise, dist = zipdist(lat1 = latitude, long1=longitude))
zipdist = function(lat1, long1, lat2 = 42.387696299999, long2 = -71.22021320) {
## calc the distance
## http://goo.gl/OVZDz
## http://goo.gl/fcGlC
R = 3961 # Earth radius in miles, 6373 for km
#BENT.LAT = 42.38769629999999
#BENT.LONG = -71.22021320
dlong = long2 - long1
dlat = lat2 - lat1
a = (sin(dlat/2))^2 + cos(lat1) * cos(lat2) * (sin(dlon/2))^2
c = 2 * atan2( sqrt(a), sqrt(1-a))
dist = R * c
return(dist)
}
tmp = ddply(df, .(pidm), summarise, dist = zipdist(lat1 = latitude, long1=longitude))
zipdist(38.898556, -77.037852)
zipdist = function(lat1, long1, lat2 = 42.387696299999, long2 = -71.22021320) {
## calc the distance
## http://goo.gl/OVZDz
## http://goo.gl/fcGlC
R = 3961 # Earth radius in miles, 6373 for km
#BENT.LAT = 42.38769629999999
#BENT.LONG = -71.22021320
dlon = long2 - long1
dlat = lat2 - lat1
a = (sin(dlat/2))^2 + cos(lat1) * cos(lat2) * (sin(dlon/2))^2
c = 2 * atan2( sqrt(a), sqrt(1-a))
dist = R * c
return(dist)
}
zipdist(38.898556, -77.037852)
lat1 = 38.898556
long1 = -77.037852
R = 3961 # Earth radius in miles, 6373 for km
lat2 = 42.387696299999
long2 = -71.22021320
dlon = long2 - long1
dlat = lat2 - lat1
a = (sin(dlat/2))^2 + cos(lat1) * cos(lat2) * (sin(dlon/2))^2
c = 2 * atan2( sqrt(a), sqrt(1-a))
R*c
c
a = ((sin(dlat/2))^2) + cos(lat1) * cos(lat2) * ((sin(dlon/2))^2)
c = 2 * atan2( sqrt(a), sqrt(1-a))
dist = R * c
dist
radmult = pi / 180
lat1 = lat1 * radmult
lat2 = lat2 * radmult
long1 = long1 * radmult
long2 = long2 * radmult
x = cos(lat1)*cost(lat2)*cos(long1)*cos(long2)
x = x + cos(lat1)*sin(long1)*cos(lat2)*sin(long2)
x = cos(lat1)*cos(lat2)*cos(long1)*cos(long2)
x = x + cos(lat1)*sin(long1)*cos(lat2)*sin(long2)
x = x + sin(lat1)*sin(lat2)
2
-2
x
x = -x
x
x = atan(x/(sqrt((x*x)+1))) + 2*atan(1)
x
x * 3963.1
lat2 = 42.387696299999
long2 = -71.22021320
R = 3961 # Earth radius in miles, 6373 for km
dlon = long2 - long1
dlat = lat2 - lat1
a = ((sin(dlat/2))^2) + (cos(lat1) * cos(lat2) * ((sin(dlon/2))^2))
c = 2 * atan2( sqrt(a), sqrt(1-a))
dist = R * c
dist
dlon = long2 - long1
dlat = lat2 - lat1
a = ((sin(dlat/2))^2) + (cos(lat1) * cos(lat2) * ((sin(dlon/2))^2))
c = 2 * atan2( sqrt(1-a), sqrt(a))
dist = R * c
dist
c
388.829/3961
a = ((sin(dlat/2))^2) + (cos(lat1) * cos(lat2) * ((sin(dlon/2))^2))
atan2( sqrt(1-a), sqrt(a))
2 * atan2( sqrt(1-a), sqrt(a))
lat2 = 42.387696299999
long2 = -71.22021320
zipdist = function(lat1,
long1,
lat2 = 42.387696299999,
long2 = -71.22021320) {
## calc the distance
## http://goo.gl/OVZDz
## http://goo.gl/fcGlC
R = 3961 # Earth radius in miles, 6373 for km
#BENT.LAT = 42.38769629999999
#BENT.LONG = -71.22021320
radmult = pi / 180
lat1 = lat1 * radmult
lat2 = lat2 * radmult
long1 = long1 * radmult
long2 = long2 * radmult
dlon = long2 - long1
dlat = lat2 - lat1
a = ((sin(dlat/2))^2) + (cos(lat1) * cos(lat2) * ((sin(dlon/2))^2))
c = 2 * atan2( sqrt(1-a), sqrt(a))
dist = R * c
return(dist)
}
zipdist(lat1 = 38.898556, long1 = -77.037852)
lat1 = 38.898556
long1 = -77.037852
lat2 = 42.387696299999
long2 = -71.22021320
R = 3961 # Earth radius in miles, 6373 for km
radmult = pi / 180
lat1 = lat1 * radmult
lat2 = lat2 * radmult
long1 = long1 * radmult
long2 = long2 * radmult
dlon = long2 - long1
dlat = lat2 - lat1
a = ((sin(dlat/2))^2) + (cos(lat1) * cos(lat2) * ((sin(dlon/2))^2))
a = (sin(dlat/2))^2 + (cos(lat1) * cos(lat2) * (sin(dlon/2))^2
a = (sin(dlat/2))^2 + cos(lat1) * cos(lat2) * (sin(dlon/2))^2
c = 2 * atan2( sqrt(a), sqrt(1-a),)
c = 2 * atan2( sqrt(a), sqrt(1-a))
dist = R * c
dist
zipdist(lat1 = 38.898556, long1 = -77.037852)
zipdist = function(lat1, long1, lat2=42.387696299999, long2=-71.22021320) {
## calc the distance
## http://goo.gl/OVZDz
## http://goo.gl/fcGlC = look at page source for the javascript code
R = 3961 # Earth radius in miles, 6373 for km
#BENT.LAT = 42.38769629999999
#BENT.LONG = -71.22021320
radmult = pi / 180
lat1 = lat1 * radmult
lat2 = lat2 * radmult
long1 = long1 * radmult
long2 = long2 * radmult
dlon = long2 - long1
dlat = lat2 - lat1
a = (sin(dlat/2))^2 + cos(lat1) * cos(lat2) * (sin(dlon/2))^2
c = 2 * atan2( sqrt(a), sqrt(1-a))
dist = R * c
return(dist)
}
zipdist(lat1 = 38.898556, long1 = -77.037852)
head(df)
tmp = ddply(df,
.(pidm),
summarise,
dist = zipdist(lat1=latitude, long1=longitude))
head(tmp)
dim(tmp)
dim(df)
tail(tmp)
subset(df, pidm==1135032)
with(tmp, hist(dist))
subset(df, pidm==1491554)
df$gpd = as.numeric(df$gpd=='Y')
mod = glm(gpd ~ dist, data=tmp, family=binomial())
tmp = ddply(df,
.(pidm),
summarise,
dist = zipdist(lat1=latitude, long1=longitude))
mod = glm(gpd ~ dist, data=tmp, family=binomial())
head(tmp)
head(df)
head(df$pidm)
head(tmp$pidm)
tmp = apply(df, 1, zipdist, lat1=latitude, long1=longitude)
tmp = apply(df, 1, zipdist, lat1=df$latitude, long1=df$longitude)
tmp = transform(df, dist = zipdist(lat1=latitude, long1=longitude))
head(tmp)
summary(tmp)
mod = glm(gpd ~ dist, data=tmp, family=binomial())
mod
summary(mod)
tmp$prob = predict(mod, newdata=tmp, type="response")
summary(tmp)
mean(tmp$gpd)
with(tmp, hist(prob))
library(rpart)
mod.r = rpart(gpd ~ dist, data=tmp)
mod.r
?rpart
mod.r = rpart(gpd ~ dist, data=tmp, control = rpart.control(cp = 0.01))
mod.r
mod.r = rpart(gpd ~ dist, data=tmp, control = rpart.control(cp = 0.001))
mod.r
plot(mod.r); text(mod.r)
mod.r = rpart(gpd ~ dist, data=tmp, control = rpart.control(cp = 0.001,
minsize=35))
plot(mod.r); text(mod.r)
library(nnet)
set.seed(3)
nn1 <- nnet(y~x.1+x.2,data=mydata,entropy=T,size=3,decay=0,maxit=2000,trace=T)
p <- 2       # input space dimension
N <- 200     # number of observations
set.seed(1)
x <- matrix(rnorm(N*p),ncol=p)
y <- as.numeric((x[,1]^2+x[,2]^2) > 1.4)
# In this case, there is a decision boundary
# that perfectly separates the data
mydata <- data.frame(x=x,y=y)
mydata[1:3,]
library(nnet)
set.seed(3)
nn1 <- nnet(y~x.1+x.2,data=mydata,entropy=T,size=3,decay=0,maxit=2000,trace=T)
predict(nn1,type='class')
yhat <- as.numeric(predict(nn1,type='class'))
par(mfrow=c(1,2))
plot(x,pch=19,col=c('red','blue')[y+1],main='actual labels',asp=1)
plot(x,col=c('red','blue')[(yhat>0.5)+1],pch=19,main='predicted labels',asp=1)
table(actual=y,predicted=predict(nn1,type='class'))
set.seed(4)
nn1 <- nnet(y~x.1+x.2,data=mydata,entropy=T,size=3,decay=0,maxit=2000,trace=T)
yhat <- as.numeric(predict(nn1,type='class'))
par(mfrow=c(1,2))
plot(x,pch=19,col=c('red','blue')[y+1],main='actual labels',asp=1)
plot(x,col=c('red','blue')[(yhat>0.5)+1],pch=19,main='predicted labels',asp=1)
par(mfrow=c(2,2))
for (i in 1:4){
set.seed(3)
nn1 <- nnet(y~x.1+x.2,data=mydata,entropy=T,size=i,decay=0,maxit=2000,trace=T)
yhat <- as.numeric(predict(nn1,type='class'))
plot(x,pch=20,col=c('red','blue')[yhat+1],cex=2)
title(main=paste('nnet with',i,'hidden units'))
}
library(XML)
library(RCurl)
U = "http://www.nhl.com/ice/teamstats.htm?fetchKey=20132ALLSAAALL&viewName=summary"
tables = readHTMLTable(U)
table = tables[[5]]
table = table[,2:ncol(table)]
colnames(table) = gsub("\n", "", colnames(table))
colnames(table) = tolower(colnames(table))
df = table[,3:ncol(table)]
df = do.call(data.frame, lapply(df, function(x) as.numeric(as.character(x))))
row.names(df) = table$team
df = scale(df)
## create a distance matrix
dmat = dist(df)
labels(dmat)
hc1 = hclust(dmat)
hc2 = hclust(dmat, method="ward")
hc3 = hclust(dmat, method="average")
par(mfrow = c(1,3))
plot(hc1, xlab="Team", main=hc1$method)
plot(hc2, xlab="Team", main=hc2$method)
plot(hc3, xlab="Team", main=hc3$method)
library(RODBC)
ch = odbcConnect("R_DW", "spss_ir", "funngames")
fixDate = function(col) {
tmp = as.POSIXct(strptime(col,
format='%Y-%m-%d %H:%M:%S',
tz='America/New_York'))
tmp = as.Date(tmp)
return(tmp)
}
SQL = "SELECT
ZRVUREC_ID AS id,
ZRVUREC_PIDM AS pidm,
ZRVUREC_TERM_CODE AS term,
ZRVUREC_STYP_CODE AS styprec,
ZRVUREC_APP_IND as app,
ZRVUREC_APP_STYPE_CODE AS stypapp,
ZRVUREC_SEX AS sex,
ZRVUREC_MAIN_ETHN_CODE AS race,
ZRVUREC_RES_STATE_CODE AS resstate,
ZRVUREC_RES_ZIP AS reszip,
ZRVUREC_RES_NATN_CODE AS resnatn,
ZRVUREC_RES_EPS_CODE AS reseps,
ZRVUREC_SCHL_CODE AS ceeb,
ZRVUREC_SCHL_STATE_CODE AS hsstate,
ZRVUREC_SCHL_ZIP AS hszip,
ZRVUREC_SCHL_NATN_CODE AS hsnatn,
ZRVUREC_SCHL_EPS_CODE AS hseps,
ZRVUREC_INIT_CODES AS initcodes,
ZRVUREC_INTERESTS_STRING AS recintr,
ZRVUREC_CONCAT_SRRRATT AS recattr,
ZRVUREC_MAJR_CODE AS majr,
ZRVUREC_CTYP1_CODE AS fccode,
ZRVUREC_CTYP1_CCAT_CODE AS fccat,
ZRVUREC_FIRST_CTYP1_MTH_SJYR AS fcmonth,
ZRVUREC_CONTACT_STRING AS cstring,
ZRVUREC_CTYP1_DATE AS fcdate,
ZRVUREC_APPL_DATE AS appldate
FROM   BENTLEY.ZRVUREC
WHERE  ZRVUREC_TERM_CODE IN ('201109','201209','201309','201409') AND
(ZRVUREC_STYP_CODE = 'F')"
urec = sqlQuery(ch_dw, SQL, as.is=T, stringsAsFactors=F)
colnames(urec) = tolower(colnames(urec))
urec = sqlQuery(ch, SQL, as.is=T, stringsAsFactors=F)
colnames(urec) = tolower(colnames(urec))
urec$fcdate = fixDate(urec$fcdate)
urec$appldate = fixDate(urec$appldate)
SQL = "SELECT
ZRVUREC_ID AS id,
ZRVUREC_PIDM AS pidm,
ZRVUREC_TERM_CODE AS term,
ZRVUREC_STYP_CODE AS styprec,
ZRVUREC_APP_IND as app,
ZRVUREC_APP_STYPE_CODE AS stypapp,
ZRVUREC_SEX AS sex,
ZRVUREC_MAIN_ETHN_CODE AS race,
ZRVUREC_RES_STATE_CODE AS resstate,
ZRVUREC_RES_ZIP AS reszip,
ZRVUREC_RES_NATN_CODE AS resnatn,
ZRVUREC_RES_EPS_CODE AS reseps,
ZRVUREC_SCHL_CODE AS ceeb,
ZRVUREC_SCHL_STATE_CODE AS hsstate,
ZRVUREC_SCHL_ZIP AS hszip,
ZRVUREC_SCHL_NATN_CODE AS hsnatn,
ZRVUREC_SCHL_EPS_CODE AS hseps,
ZRVUREC_INIT_CODES AS initcodes,
ZRVUREC_INTERESTS_STRING AS recintr,
ZRVUREC_CONCAT_SRRRATT AS recattr,
ZRVUREC_MAJR_CODE AS majr,
ZRVUREC_CTYP1_CODE AS fccode,
ZRVUREC_CTYP1_CCAT_CODE AS fccat,
ZRVUREC_FIRST_CTYP1_MTH_SJYR AS fcmonth,
ZRVUREC_CONTACT_STRING AS cstring,
ZRVUREC_CTYP1_DATE AS fcdate,
ZRVUREC_APPL_DATE AS appldate
FROM   BENTLEY.ZRVUREC
WHERE  ZRVUREC_TERM_CODE IN ('201309') AND
(ZRVUREC_STYP_CODE = 'F')"
urec = sqlQuery(ch, SQL, as.is=T, stringsAsFactors=F)
colnames(urec) = tolower(colnames(urec))
## fix the dates
urec$fcdate = fixDate(urec$fcdate)
urec$appldate = fixDate(urec$appldate)
head(urec)
df = subset(urec, fccode %in% c('RLS','ROS','RLA','ROA','RON','RLC','ROC','RNS','RLN','CSP'))
dim(df)
df = subset(urec, fccode %in% c('RLS','ROS','RLA','ROA','RON','RLC','ROC','RNS','RLN'))
head(df)
head(df)
library(stringr)
R.Version()
df$string = str_sub(df$cstring,
1,
str_length(df$cstring) - str_locate(df$cstring, 'COM|CMO'))
str_locate(df$cstring, 'COM|CMO')
tmp = str_split(df$cstring, "COM|CMO")
head(tmp)
head(df)
tail(df)
tail(df, 25)
head(df, 25)
tmp = str_split(df$cstring, "COM|CMO", 1)
tmp2 = unlist(tmp)
head(tmp2)
SQL = "SELECT
ZRVCONT_ID as id,
ZRVCONT_PIDM as pidm,
ZRVCONT_TERM_CODE as term,
ZRVCONT_CTYP_CODE as contcode,
ZRVCONT_CTYP_CCAT_CODE as contcat,
ZRVCONT_CTYP_DATE as contdate,
ZRVCONT_APPL_DATE as appdate,
ZRVCONT_ACCEPT_DATE as accdate,
ZRVCONT_DEPOSIT_DATE as depdate,
ZRVCONT_CANCEL_DATE as cancdate
FROM   BENTLEY.ZRVCONT
WHERE  ZRVCONT_TERM_CODE IN ('201309') AND
(ZRVCONT_STYP_CODE = 'F') AND
ZRVCONT_CTYP1_CODE IN ('RLS','ROS','RLA','ROA','RON','RLC','ROC','RNS','RLN','CSP')"
cont = sqlQuery(ch_dw, SQL, as.is=T, stringsAsFactors=F)
colnames(cont) = tolower(colnames(cont))
SQL = "SELECT
ZRVCONT_ID as id,
ZRVCONT_PIDM as pidm,
ZRVCONT_TERM_CODE as term,
ZRVCONT_CTYP_CODE as contcode,
ZRVCONT_CTYP_CCAT_CODE as contcat,
ZRVCONT_CTYP_DATE as contdate,
ZRVCONT_APPL_DATE as appdate,
ZRVCONT_ACCEPT_DATE as accdate,
ZRVCONT_DEPOSIT_DATE as depdate,
ZRVCONT_CANCEL_DATE as cancdate
FROM   BENTLEY.ZRVCONT
WHERE  ZRVCONT_TERM_CODE IN ('201309') AND
(ZRVCONT_STYP_CODE = 'F') AND
ZRVCONT_CTYP1_CODE IN ('RLS','ROS','RLA','ROA','RON','RLC','ROC','RNS','RLN','CSP')"
cont = sqlQuery(ch, SQL, as.is=T, stringsAsFactors=F)
colnames(cont) = tolower(colnames(cont))
SQL = "SELECT
ZRVCONT_ID as id,
ZRVCONT_PIDM as pidm,
ZRVCONT_TERM_CODE as term,
ZRVCONT_CTYP_CODE as contcode,
ZRVCONT_CTYP_CCAT_CODE as contcat,
ZRVCONT_CTYP_DATE as contdate,
ZRVCONT_APPL_DATE as appdate,
ZRVCONT_ACCEPT_DATE as accdate,
ZRVCONT_DEPOSIT_DATE as depdate,
ZRVCONT_CANCEL_DATE as cancdate
FROM   BENTLEY.ZRVCONT
WHERE  ZRVCONT_TERM_CODE IN ('201309') AND
(ZRVCONT_STYP_CODE = 'F') AND
ZRVCONT_CTYP1_CODE IN ('RLS','ROS','RLA','ROA','RON','RLC','ROC','RNS','RLN')"
cont = sqlQuery(ch, SQL, as.is=T, stringsAsFactors=F)
colnames(cont) = tolower(colnames(cont))
dim(cont)
cont$contdate = fixDate(cont$contdate)
cont$appdate = fixDate(cont$appdate)
cont$accdate = fixDate(cont$accdate)
cont$depdate = fixDate(cont$depdate)
cont$cancdate = fixDate(cont$cancdate)
str(cont)
as.Date("2012-08-15")
df = subset(cont, contdate < as.Date("2012-08-15"))
dim(df)
df$appind = as.numeric(!is.na(appdate))
df$appind = as.numeric(!is.na(df$appdate))
head(df)
library(plyr)
df.sr = ddply(df, .(id), summarise, app = max(appind))
length(unique(cont$id))
df.sr = ddply(df, .(id), summarise,
numrecs = length(pidm),
app = max(appind))
head(df.sr)
ddply(df.sr, .(numrecs), summarise, numrecs = length(id), apprate = mean(app))
ddply(df.sr, .(numrecs), summarise, recs = length(id), apprate = mean(app))
install.packages(c("devtools", "knitr",
"roxygen2", "testthat"))
library(RODBC)
ch = odbcConnect("R_DW", "spss_ir", "funngames")
odbcGetInfo(ch)
library(RODBC)
ch = odbcConnect("R_DW", "spss_ir", "funngames")
odbcDriverConnect(ch)
ch
close(ch)
load("N:/Enrollment Management/Enrollment Analytics/Models/Hot Prospect Modeling/201409/models/hp-model_07082013.Rdata")
ls()
summary(hp.model)
dim(current)
R_HOME
R_HOME()
R.home()
2+2
require(devtools)
library(RODBC)
ch = odbcConnect("sundevo", "ops$btibert", "BT03030202")
close(ch)
U = "ops$btibert"
PWD = "BT03030202"
MyDSN = "sundevo"
system.time(ch = odbcConnect(myDSN, U, PWD))
myDSN = "sundevo"
U = "ops$btibert"
PWD = "BT03030202"
system.time(ch = odbcConnect(myDSN, U, PWD))
ch = odbcConnect(myDSN, U, PWD)
library(RODBC)
system.time(ch = odbcConnect(myDSN, U, PWD))
ch = odbcConnect(myDSN, U, PWD)
## load the data
data(iris)
colnames(iris) = tolower(colnames(iris))
## fit a model to a dataset
library(rpart)
tree = rpart(species ~ ., data=iris)
## score the dataset -- I hate factors
pred = predict(tree, newdata=iris, type="class")
pred = as.character(pred)
df = cbind(iris, pred)
setwd("~/Dropbox/GitHub/Blog Post")
setwd("~/Dropbox/GitHub/Blog Post")
save(df, file="test-data.rdata")
